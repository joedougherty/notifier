#!/usr/bin/env python
# -*- coding: utf-8 -*-
import serial
import serial.tools.list_ports
import subprocess
import logging
import time

def createlogger():
    logger = logging.getLogger()
    handler = logging.StreamHandler()
    formatter = logging.Formatter('[ %(asctime)s ] %(levelname)-8s %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    logger.setLevel(logging.DEBUG)
    return logger

def alert(title="Pay Attention!", msg="Someone wants to speak with you."):
    rc = subprocess.call(["/usr/bin/notify-send", title, msg])
    if rc == 0:
        log.info('/usr/bin/notify received return code 0')
    else:
        log.error('/usr/bin/notify received return code {}'.format(rc))

def autoconnect(alert_user_on_connection=False):
    log.info('Attempting to find + connect to USB device...')

    device_not_found = True

    while device_not_found:
        known_ports = list(serial.tools.list_ports.comports())
        for p in known_ports:
            if p.description == 'FT232R USB UART':
                log.info('Found device at address: {}'.format(p.device))
                device_not_found = False
        time.sleep(1)

    if alert_user_on_connection:
        alert(msg="USB connected! :]")

    return serial.Serial(p.device, 9600, timeout=10)

if __name__ == '__main__':
    log = createlogger()
    log.info('notifier started.')

    p = autoconnect() # Won't you join me on the perennial quest?

    while True:
        try:
            serialMsg = p.readline().strip()
        except serial.serialutil.SerialException:
            log.error('USB disconnected.')
            alert(msg="USB disconnected. :[")
            p = autoconnect(alert_user_on_connection=True)
            serialMsg = p.readline().strip()

        if serialMsg in ('on', b'on'):
            log.info('Received {} from serial.'.format(serialMsg.strip()))
            alert()
